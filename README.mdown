SVGKit
======

SVGKit is a Cocoa framework for rendering SVG files as Core Animation layers. All shapes are represented by instances of the `CAShapeLayer` class, and are, by design, animatable. SVGKit is compatible with the latest iOS SDK's.

BRANCH: "transforms"
======

This specific branch contains a MASSIVE re-factor of the original SVGKit, aiming to make it easier to use in your apps. Please read the "usage" instructions carefully - they have changed from previous SVGKit versions!


Usage - Basic (iPhone/iPad)
-----

To use this, you must:
  1. Load an SVG file
  2. EITHER:
    2a. Convert the document to CALayer's which Apple can render
    2b. Read the SVG data directly by looking at the tree of SVGElement subclasses


2a: The easiest way to do this is:
  1. SVGKImage *im = [SVGKImage imageNamed:@"my_svg_file"]; //this loads the file, parses the SVG, and outputs an SVGImage object
  2. [self.view.layer addSublayer:im.CALayerTree]; // SVGKImage can export itself as Apple's CALayer's

...and if you want to display the same SVG somewhere else simultaneously, you don't have to re-parse it, you can just call:
  3. [self.view.layer addSublayer:[im newCALayerTree]; // Creates a clone of the CALayers, you can edit without affecting originals


2b:  The easiest way to do this is:
  1. SVGKImage *im = [SVGKImage imageNamed:@"my_svg_file"]; //this loads the file, parses the SVG, and outputs an SVGImage object
  2. SVGSVGElement* rootOfTree = im.DOMTree; // NB: this is a partial implementation of the official "SVG DOM" standard. See the header file for this class and its superclass to see what you can do with it


Usage - Advanced (iPHone/iPad)
-----

The big change with this branch, apart from requiring fewer lines of code, is that you can now do easy loading of different files. e.g.

  - [SVGKParser parse: (SVGKSource*)]; // anything that's an "SVGKSource" can be parsed

  - [SVGKSource sourceWithFile:@"monkey.svg"]; // create a source from disk...
  - [SVGKSource sourceWithURL:@"http://upload.wikimedia.org/wikipedia/commons/f/fd/Ghostscript_Tiger.svg"]; // create a source from disk...

  - (SVGKParser*).currentParseRun.warnings; // array of NSError objects, each one a "WARNING" from the parser
  - (SVGKParser*).currentParseRun.errorsFatal; // array of NSError objects, each one a "FATAL ERROR" from the parser - if your SVG didn't render at all, this is why!
  - (SVGKParser*).currentParseRun.errorsRecoverable; // array of NSError objects, each one a "RECOVERABLE ERROR" from the parser - if your SVG didn't render correctly, this is why! (although you probably still got to see something)

  - (SVGKImage*).parseErrorsAndWarnings; // this is a convenience pointer to (SVGKParser*).currentParseRun used above

Usage - OS X
-----

UNSUPPORTED: the code exists, but none of the maintainers have used it recently, so we're not even sure if the OS X build still works!

Feel free to report any issues or suggest improvements in the issue tracker


Installation
-----

Dependencies:

  git submodule init && git submodule update

iOS (iPhone/iPad):
  1. Open the project "XcodeProjects/SVGKit/SVGKit"
  2. Select the target "SVGKit Library" from the dropdown build selector at top left
  3. Build
  4. Look in your output directory for a folder named "debug-universal" - this contains a library + headers for: iPhone, iPad, iOS Simulator

  5. Drag/drop the library file, and the headers folder (should be called "usr") into your iPhone/iPad project.
  6. Edit your build settings and set "C/C++ Compiler Version" = "LLVM Compiler 2.0"
  7. Edit your build settings and add "Other Linker Flags" = "-ObjC"

  8. (Optional but recommended): Edit your build settings and add "Header Search Paths" = "/usr/include/libxml2"
  9. (Optional but recommended): Add the framework "libxml2.dylib"

OS X: ...this needs updating; some minor code changes are needed to "fix" this project. The OS X framework currently DOES NOT BUILD because iOS classes are being referenced in a couple of places.